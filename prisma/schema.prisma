// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "AccountToUser")

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "SessionToUser")
}

// This model stores user information like name, email (unique), role (user or admin by default), and relations to accounts, sessions, and profile.
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          Enum_RoleName @default(USER)
  accounts      Account[]     @relation(name: "AccountToUser")
  sessions      Session[]     @relation(name: "SessionToUser")
  deleted       Boolean       @default(false)
  eneabled      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  profile       Profile?
}

//  This model stores additional user details like first name, last name, bio, and image. It has a one-to-one relationship with the User model.
model Profile {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  bio       String?
  image     String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
}

// This model represents patrons of the library, storing details like document ID, name, email, phone, address, and relations to orders.
model Customer {
  id        String   @id @default(cuid())
  document  String
  name      String
  email     String
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

// This model represents a borrowing request, holding information like customer, status, creation/update times, and relations to order items.
model Order {
  id         String      @id @default(cuid())
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId String
  status     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  items      OrderItem[]
}

// This model represents a specific item borrowed within an order, containing details like order, product, quantity, creation/update times.
model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  bookId    String
  quantity  Int
  book      Book @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Enum_RoleName {
  USER
  ADMIN
}

// This model could be a subclass of Products specifically for books, potentially including additional attributes like author, genre, ISBN, and publication date.
model Book {
  id              String      @id @default(cuid())
  title           String
  author          String
  isbn            String?
  publicationDate DateTime?
  genre           String
  copies          Int         @default(1)
  image           String
  orderItems  OrderItem[]
}

